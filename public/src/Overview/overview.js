import React from 'react';
import AddToCart from './AddToCart.jsx'; //props are:
//style = currently selected style object. To passed into Add to Cart.
//productStyles = all available styles for current product. To be passed into StyleSelector.

class Overview extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      productStyles: [],
      selectedStyle: {},
      productInfo: {}
    };
  }

  changeStyle(e) {//event handler function to be passed down to style selector.
    //when a new selection is made this will run and update the state as needed
  }

  getStyles(productId) {
    //request to get all the styles available on single/specified product
    //returns a promise
    return axios.get(`https://app-hrsei-api.herokuapp.com/api/fec2/hratx/products/${productId}/styles`, {
      headers: {
        'Authorization': token
      },
      params: {
        product_id: productId
      }
    });
  }

  getProductInfo(productId) {
    //request to get all product info for specified product
    //returns a promise
    return axios.get(`https://app-hrsei-api.herokuapp.com/api/fec2/hratx/products/${productId}`, {
      headers: {
        'Authorization': token
      },
      params: {
        product_id: productId
      }
    });
  }

  componentDidMount() {
    var newState = {};
    Promise.all([this.getProductInfo(this.props.productId), this.getStyles(this.props.productId)]).then(values => {
      newState.productInfo = values[0].data;
      newState.styles = values[1].data.results;
      newState.selectedStyle = newState.styles[0];
      console.log('new overview State: ', newState);
      this.setState(newState);
    }).catch(err => {
      console.log('error get overview data: ', err);
    });
  }

  render() {
    return /*#__PURE__*/React.createElement(AddToCart, {
      skus: this.state.selectedStyle.skus
    });
  }

}

export default Overview;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9zcmMvT3ZlcnZpZXcvT3ZlcnZpZXcuanN4Il0sIm5hbWVzIjpbIlJlYWN0IiwiQWRkVG9DYXJ0IiwiT3ZlcnZpZXciLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJwcm9kdWN0U3R5bGVzIiwic2VsZWN0ZWRTdHlsZSIsInByb2R1Y3RJbmZvIiwiY2hhbmdlU3R5bGUiLCJlIiwiZ2V0U3R5bGVzIiwicHJvZHVjdElkIiwiYXhpb3MiLCJnZXQiLCJoZWFkZXJzIiwidG9rZW4iLCJwYXJhbXMiLCJwcm9kdWN0X2lkIiwiZ2V0UHJvZHVjdEluZm8iLCJjb21wb25lbnREaWRNb3VudCIsIm5ld1N0YXRlIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJ2YWx1ZXMiLCJkYXRhIiwic3R5bGVzIiwicmVzdWx0cyIsImNvbnNvbGUiLCJsb2ciLCJzZXRTdGF0ZSIsImNhdGNoIiwiZXJyIiwicmVuZGVyIiwic2t1cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsaUJBQXRCLEMsQ0FFQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUMsUUFBTixTQUF1QkYsS0FBSyxDQUFDRyxTQUE3QixDQUF1QztBQUNyQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxhQUFhLEVBQUUsRUFESjtBQUVYQyxNQUFBQSxhQUFhLEVBQUUsRUFGSjtBQUdYQyxNQUFBQSxXQUFXLEVBQUU7QUFIRixLQUFiO0FBS0Q7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsQ0FBRCxFQUFJLENBQ2I7QUFDQTtBQUNEOztBQUVEQyxFQUFBQSxTQUFTLENBQUNDLFNBQUQsRUFBWTtBQUNuQjtBQUNBO0FBQ0EsV0FBT0MsS0FBSyxDQUFDQyxHQUFOLENBQVcsK0RBQThERixTQUFVLFNBQW5GLEVBQTZGO0FBQ2xHRyxNQUFBQSxPQUFPLEVBQUU7QUFDUCx5QkFBaUJDO0FBRFYsT0FEeUY7QUFJbEdDLE1BQUFBLE1BQU0sRUFBRTtBQUNOQyxRQUFBQSxVQUFVLEVBQUVOO0FBRE47QUFKMEYsS0FBN0YsQ0FBUDtBQVFEOztBQUVETyxFQUFBQSxjQUFjLENBQUNQLFNBQUQsRUFBWTtBQUN4QjtBQUNBO0FBQ0EsV0FBT0MsS0FBSyxDQUFDQyxHQUFOLENBQVcsK0RBQThERixTQUFVLEVBQW5GLEVBQXFGO0FBQzFGRyxNQUFBQSxPQUFPLEVBQUU7QUFDUCx5QkFBaUJDO0FBRFYsT0FEaUY7QUFJMUZDLE1BQUFBLE1BQU0sRUFBRTtBQUNOQyxRQUFBQSxVQUFVLEVBQUVOO0FBRE47QUFKa0YsS0FBckYsQ0FBUDtBQVFEOztBQUVEUSxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQixRQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxDQUFDLEtBQUtKLGNBQUwsQ0FBb0IsS0FBS2YsS0FBTCxDQUFXUSxTQUEvQixDQUFELEVBQTRDLEtBQUtELFNBQUwsQ0FBZSxLQUFLUCxLQUFMLENBQVdRLFNBQTFCLENBQTVDLENBQVosRUFDQ1ksSUFERCxDQUNPQyxNQUFELElBQVk7QUFDaEJKLE1BQUFBLFFBQVEsQ0FBQ2IsV0FBVCxHQUF1QmlCLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVUMsSUFBakM7QUFDQUwsTUFBQUEsUUFBUSxDQUFDTSxNQUFULEdBQWtCRixNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVVDLElBQVYsQ0FBZUUsT0FBakM7QUFDQVAsTUFBQUEsUUFBUSxDQUFDZCxhQUFULEdBQXlCYyxRQUFRLENBQUNNLE1BQVQsQ0FBZ0IsQ0FBaEIsQ0FBekI7QUFDQUUsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksc0JBQVosRUFBb0NULFFBQXBDO0FBQ0EsV0FBS1UsUUFBTCxDQUFjVixRQUFkO0FBQ0QsS0FQRCxFQVFDVyxLQVJELENBUVFDLEdBQUQsSUFBUztBQUNkSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSwyQkFBWixFQUF5Q0csR0FBekM7QUFDRCxLQVZEO0FBV0Q7O0FBRURDLEVBQUFBLE1BQU0sR0FBRztBQUNQLHdCQUNFLG9CQUFDLFNBQUQ7QUFBVyxNQUFBLElBQUksRUFBRSxLQUFLN0IsS0FBTCxDQUFXRSxhQUFYLENBQXlCNEI7QUFBMUMsTUFERjtBQUdEOztBQTVEb0M7O0FBK0R2QyxlQUFlbEMsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWRkVG9DYXJ0IGZyb20gJy4vQWRkVG9DYXJ0LmpzeCc7XG5cbi8vcHJvcHMgYXJlOlxuLy9zdHlsZSA9IGN1cnJlbnRseSBzZWxlY3RlZCBzdHlsZSBvYmplY3QuIFRvIHBhc3NlZCBpbnRvIEFkZCB0byBDYXJ0LlxuLy9wcm9kdWN0U3R5bGVzID0gYWxsIGF2YWlsYWJsZSBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvZHVjdC4gVG8gYmUgcGFzc2VkIGludG8gU3R5bGVTZWxlY3Rvci5cbmNsYXNzIE92ZXJ2aWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHByb2R1Y3RTdHlsZXM6IFtdLFxuICAgICAgc2VsZWN0ZWRTdHlsZToge30sXG4gICAgICBwcm9kdWN0SW5mbzoge31cbiAgICB9XG4gIH1cblxuICBjaGFuZ2VTdHlsZShlKSB7XG4gICAgLy9ldmVudCBoYW5kbGVyIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCBkb3duIHRvIHN0eWxlIHNlbGVjdG9yLlxuICAgIC8vd2hlbiBhIG5ldyBzZWxlY3Rpb24gaXMgbWFkZSB0aGlzIHdpbGwgcnVuIGFuZCB1cGRhdGUgdGhlIHN0YXRlIGFzIG5lZWRlZFxuICB9XG5cbiAgZ2V0U3R5bGVzKHByb2R1Y3RJZCkge1xuICAgIC8vcmVxdWVzdCB0byBnZXQgYWxsIHRoZSBzdHlsZXMgYXZhaWxhYmxlIG9uIHNpbmdsZS9zcGVjaWZpZWQgcHJvZHVjdFxuICAgIC8vcmV0dXJucyBhIHByb21pc2VcbiAgICByZXR1cm4gYXhpb3MuZ2V0KGBodHRwczovL2FwcC1ocnNlaS1hcGkuaGVyb2t1YXBwLmNvbS9hcGkvZmVjMi9ocmF0eC9wcm9kdWN0cy8ke3Byb2R1Y3RJZH0vc3R5bGVzYCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuXG4gICAgICB9LFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHByb2R1Y3RfaWQ6IHByb2R1Y3RJZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0UHJvZHVjdEluZm8ocHJvZHVjdElkKSB7XG4gICAgLy9yZXF1ZXN0IHRvIGdldCBhbGwgcHJvZHVjdCBpbmZvIGZvciBzcGVjaWZpZWQgcHJvZHVjdFxuICAgIC8vcmV0dXJucyBhIHByb21pc2VcbiAgICByZXR1cm4gYXhpb3MuZ2V0KGBodHRwczovL2FwcC1ocnNlaS1hcGkuaGVyb2t1YXBwLmNvbS9hcGkvZmVjMi9ocmF0eC9wcm9kdWN0cy8ke3Byb2R1Y3RJZH1gLHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlblxuICAgICAgfSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0SWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuICAgIFByb21pc2UuYWxsKFt0aGlzLmdldFByb2R1Y3RJbmZvKHRoaXMucHJvcHMucHJvZHVjdElkKSwgdGhpcy5nZXRTdHlsZXModGhpcy5wcm9wcy5wcm9kdWN0SWQpXSlcbiAgICAudGhlbigodmFsdWVzKSA9PiB7XG4gICAgICBuZXdTdGF0ZS5wcm9kdWN0SW5mbyA9IHZhbHVlc1swXS5kYXRhO1xuICAgICAgbmV3U3RhdGUuc3R5bGVzID0gdmFsdWVzWzFdLmRhdGEucmVzdWx0cztcbiAgICAgIG5ld1N0YXRlLnNlbGVjdGVkU3R5bGUgPSBuZXdTdGF0ZS5zdHlsZXNbMF07XG4gICAgICBjb25zb2xlLmxvZygnbmV3IG92ZXJ2aWV3IFN0YXRlOiAnLCBuZXdTdGF0ZSk7XG4gICAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3IgZ2V0IG92ZXJ2aWV3IGRhdGE6ICcsIGVycik7XG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEFkZFRvQ2FydCBza3VzPXt0aGlzLnN0YXRlLnNlbGVjdGVkU3R5bGUuc2t1c30vPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPdmVydmlldztcbiJdfQ==