import React from 'react';
import SizeSelector from './SizeSelector.jsx';
import QuantitySelector from './QuantitySelector.jsx';
import token from './token.jsx';
import axios from 'axios';

class AddToCart extends React.Component {
  //expects props to contain object called skus
  constructor(props) {
    super(props);
    this.state = {
      sizeFirstSkus: {},
      sizes: [],
      sizeSelection: '',
      quantityEnabled: false,
      quantityAvailable: 0,
      quantitySelection: null
    };
  }

  changeSize(e) {
    // if this is the first slection away formthe default, remove "Select Size as an option"
    if (document.getElementById('size').options[0].value === 'Select Size') {
      document.getElementById('size').remove(0);
    }

    var newSize = e.target.value;
    document.getElementById('quantity').value = 1;
    this.setState({
      sizeSelection: newSize,
      quantityEnabled: true,
      quantityAvailable: this.state.sizeFirstSkus[newSize].quantity,
      quantitySelection: 1
    });
  }

  changeQuantity(e) {
    var newQuantity = e.target.value;
    this.setState({
      quantitySelection: newQuantity
    });
  }

  enforceSizeSelection(e) {
    //opens size dropdown
    //displays a message that says "Please select size"
    //come back to this if time to figure out how to open the dropdown and display a more graceful message
    alert('Please select size');
  }

  addToCart(e) {
    //may not be working properly. Will have to test again when I have a real SKU instead of dummy data
    var sku_id = Number.parseInt(this.state.sizeFirstSkus[this.state.sizeSelection].sku_id);
    axios({
      method: 'post',
      url: 'https://app-hrsei-api.herokuapp.com/api/fec2/hratx/cart',
      data: {
        sku_id: sku_id,
        count: this.state.quantitySelection
      },
      headers: {
        'Authorization': token
      }
    }).then(() => {
      console.log('added to cart');
    }).catch(err => {
      console.log('error');
      throw err;
    });
  }

  componentDidMount() {
    //populates sizeFirstSkus and sizes objects
    var sizeFirstSkus = {};
    var size, quantity;

    for (var k in this.props.skus) {
      size = this.props.skus[k].size;
      quantity = this.props.skus[k].quantity;
      sizeFirstSkus[size] = {
        sku_id: k,
        quantity: quantity
      };
    }

    this.setState({
      sizeFirstSkus: sizeFirstSkus,
      sizes: Object.keys(sizeFirstSkus)
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, this.state.sizes.length === 0 ? /*#__PURE__*/React.createElement("select", {
      id: "size",
      name: "size",
      disabled: true
    }, /*#__PURE__*/React.createElement("option", null, "OUT OF STOCK")) : /*#__PURE__*/React.createElement(SizeSelector, {
      sizes: this.state.sizes,
      change: this.changeSize.bind(this)
    }), this.state.quantityEnabled ? /*#__PURE__*/React.createElement(QuantitySelector, {
      quantityAvailable: this.state.quantityAvailable,
      change: this.changeQuantity.bind(this)
    }) : /*#__PURE__*/React.createElement("select", {
      id: "quantity",
      name: "quantity",
      disabled: true
    }, /*#__PURE__*/React.createElement("option", null, "-")), this.state.sizes.length > 0 ? this.state.sizeSelection === "" ?
    /*#__PURE__*/

    /* there is quantity, but size is not selected. Button opens dropdown display message */
    React.createElement("button", {
      onClick: this.enforceSizeSelection.bind(this)
    }, "Add to Cart") :
    /*#__PURE__*/

    /* quantity and size selected. Button adds to cart */
    React.createElement("button", {
      onClick: this.addToCart.bind(this)
    }, "Add to Cart") :
    /*#__PURE__*/

    /* hide button */
    React.createElement("button", {
      style: {
        visibility: 'hidden'
      }
    }, "Add to Cart"));
  }

}

;
export default AddToCart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,