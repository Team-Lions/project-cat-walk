import React from 'react';
import SizeSelector from './SizeSelector.jsx';
import QuantitySelector from './QuantitySelector.jsx';

class AddToCart extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      style: props.style,
      sizes: ['s', 'm', 'l'],
      sizeSelection: '',
      quantityEnabled: false,
      quantities: [1, 2, 3, 4],
      quantitySelection: null
    };
  }

  getStyleData() {//ajax request to get all the relevent data for the selected style
    // ^ see if it's possible to do something else that allows this to return a promise. Will axios work here?
  } //Size functions


  changeSize(e) {
    var newSize = e.target.value;
    this.setState({
      sizeSelection: newSize,
      quantityEnabled: true
    });
  }

  parseAvailableSizes(data) {//looks through style data to populate an array of available sizes
    //returns an array, but does not set the state
  } //Quantity Functions


  changeQuantity(e) {
    var newQuantity = e.target.value;
    this.setState({
      quantitySelection: newQuantity
    });
  }

  parseStock() {//creates an array of integers of wither 1 - total number of stock, or 1-15 if the total number of stock is above 15
    //is dependent on size being selected
    //returns array, but does not set the state
  }

  addToCart(event) {//event handler passed into the button
    //will have different functionality based on the current state
  } // componentDidMount() {
  //   //gets data on current style. Upon success renders the following:
  //   //Size Selector -
  //     //invoke parseAvailableSizes
  //     //if return.length === 0 then set state to selection = "OUT OF STOCK", make dropdown inactive
  //     //else set state to selection = "Select Size", sizes = return of parseAvailableSizes call
  //   //Won't have to do anything with QuantitySelector, since it's defaults are to be inactive until a size is selected
  // }


  render() {
    //invokes :
    //SizeSelector
    //QuantitySelector (conditional rendering based on state.quantityEnabled)
    //renders an add to cart button that is dependent on current selection
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SizeSelector, {
      sizes: this.state.sizes,
      change: this.changeSize.bind(this)
    }), /*#__PURE__*/React.createElement(QuantitySelector, {
      quantities: this.state.quantities,
      change: this.changeQuantity.bind(this)
    }));
  }

}

;
export default AddToCart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9zcmMvT3ZlcnZpZXcvQWRkVG9DYXJ0LmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIlNpemVTZWxlY3RvciIsIlF1YW50aXR5U2VsZWN0b3IiLCJBZGRUb0NhcnQiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJzdHlsZSIsInNpemVzIiwic2l6ZVNlbGVjdGlvbiIsInF1YW50aXR5RW5hYmxlZCIsInF1YW50aXRpZXMiLCJxdWFudGl0eVNlbGVjdGlvbiIsImdldFN0eWxlRGF0YSIsImNoYW5nZVNpemUiLCJlIiwibmV3U2l6ZSIsInRhcmdldCIsInZhbHVlIiwic2V0U3RhdGUiLCJwYXJzZUF2YWlsYWJsZVNpemVzIiwiZGF0YSIsImNoYW5nZVF1YW50aXR5IiwibmV3UXVhbnRpdHkiLCJwYXJzZVN0b2NrIiwiYWRkVG9DYXJ0IiwiZXZlbnQiLCJyZW5kZXIiLCJiaW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsWUFBUCxNQUF5QixvQkFBekI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2Qix3QkFBN0I7O0FBRUEsTUFBTUMsU0FBTixTQUF3QkgsS0FBSyxDQUFDSSxTQUE5QixDQUF3QztBQUN0Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxLQUFLLEVBQUVGLEtBQUssQ0FBQ0UsS0FERjtBQUVYQyxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsQ0FGSTtBQUdYQyxNQUFBQSxhQUFhLEVBQUUsRUFISjtBQUlYQyxNQUFBQSxlQUFlLEVBQUUsS0FKTjtBQUtYQyxNQUFBQSxVQUFVLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBTEQ7QUFNWEMsTUFBQUEsaUJBQWlCLEVBQUU7QUFOUixLQUFiO0FBUUQ7O0FBRURDLEVBQUFBLFlBQVksR0FBRyxDQUNiO0FBQ0E7QUFDRCxHQWhCcUMsQ0FrQnRDOzs7QUFDQUMsRUFBQUEsVUFBVSxDQUFDQyxDQUFELEVBQUk7QUFDWixRQUFJQyxPQUFPLEdBQUdELENBQUMsQ0FBQ0UsTUFBRixDQUFTQyxLQUF2QjtBQUNBLFNBQUtDLFFBQUwsQ0FBYztBQUNaVixNQUFBQSxhQUFhLEVBQUVPLE9BREg7QUFFWk4sTUFBQUEsZUFBZSxFQUFFO0FBRkwsS0FBZDtBQUlEOztBQUVEVSxFQUFBQSxtQkFBbUIsQ0FBQ0MsSUFBRCxFQUFPLENBQ3hCO0FBQ0E7QUFDRCxHQTlCcUMsQ0FnQ3RDOzs7QUFDQUMsRUFBQUEsY0FBYyxDQUFDUCxDQUFELEVBQUk7QUFDaEIsUUFBSVEsV0FBVyxHQUFHUixDQUFDLENBQUNFLE1BQUYsQ0FBU0MsS0FBM0I7QUFDQSxTQUFLQyxRQUFMLENBQWM7QUFDWlAsTUFBQUEsaUJBQWlCLEVBQUVXO0FBRFAsS0FBZDtBQUdEOztBQUVEQyxFQUFBQSxVQUFVLEdBQUcsQ0FDWDtBQUNBO0FBQ0E7QUFDRDs7QUFFREMsRUFBQUEsU0FBUyxDQUFDQyxLQUFELEVBQVEsQ0FDZjtBQUNBO0FBQ0QsR0FqRHFDLENBbUR0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQUMsRUFBQUEsTUFBTSxHQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFDRSw4Q0FDRSxvQkFBQyxZQUFEO0FBQWMsTUFBQSxLQUFLLEVBQUUsS0FBS3JCLEtBQUwsQ0FBV0UsS0FBaEM7QUFBdUMsTUFBQSxNQUFNLEVBQUUsS0FBS00sVUFBTCxDQUFnQmMsSUFBaEIsQ0FBcUIsSUFBckI7QUFBL0MsTUFERixlQUVFLG9CQUFDLGdCQUFEO0FBQWtCLE1BQUEsVUFBVSxFQUFFLEtBQUt0QixLQUFMLENBQVdLLFVBQXpDO0FBQXFELE1BQUEsTUFBTSxFQUFFLEtBQUtXLGNBQUwsQ0FBb0JNLElBQXBCLENBQXlCLElBQXpCO0FBQTdELE1BRkYsQ0FERjtBQU1EOztBQXZFcUM7O0FBd0V2QztBQUVELGVBQWUxQixTQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTaXplU2VsZWN0b3IgZnJvbSAnLi9TaXplU2VsZWN0b3IuanN4JztcbmltcG9ydCBRdWFudGl0eVNlbGVjdG9yIGZyb20gJy4vUXVhbnRpdHlTZWxlY3Rvci5qc3gnO1xuXG5jbGFzcyBBZGRUb0NhcnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc3R5bGU6IHByb3BzLnN0eWxlLFxuICAgICAgc2l6ZXM6IFsncycsICdtJywgJ2wnXSxcbiAgICAgIHNpemVTZWxlY3Rpb246ICcnLFxuICAgICAgcXVhbnRpdHlFbmFibGVkOiBmYWxzZSxcbiAgICAgIHF1YW50aXRpZXM6IFsxLCAyLCAzLCA0XSxcbiAgICAgIHF1YW50aXR5U2VsZWN0aW9uOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIGdldFN0eWxlRGF0YSgpIHtcbiAgICAvL2FqYXggcmVxdWVzdCB0byBnZXQgYWxsIHRoZSByZWxldmVudCBkYXRhIGZvciB0aGUgc2VsZWN0ZWQgc3R5bGVcbiAgICAvLyBeIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIHNvbWV0aGluZyBlbHNlIHRoYXQgYWxsb3dzIHRoaXMgdG8gcmV0dXJuIGEgcHJvbWlzZS4gV2lsbCBheGlvcyB3b3JrIGhlcmU/XG4gIH1cblxuICAvL1NpemUgZnVuY3Rpb25zXG4gIGNoYW5nZVNpemUoZSkge1xuICAgIHZhciBuZXdTaXplID0gZS50YXJnZXQudmFsdWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaXplU2VsZWN0aW9uOiBuZXdTaXplLFxuICAgICAgcXVhbnRpdHlFbmFibGVkOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBwYXJzZUF2YWlsYWJsZVNpemVzKGRhdGEpIHtcbiAgICAvL2xvb2tzIHRocm91Z2ggc3R5bGUgZGF0YSB0byBwb3B1bGF0ZSBhbiBhcnJheSBvZiBhdmFpbGFibGUgc2l6ZXNcbiAgICAvL3JldHVybnMgYW4gYXJyYXksIGJ1dCBkb2VzIG5vdCBzZXQgdGhlIHN0YXRlXG4gIH1cblxuICAvL1F1YW50aXR5IEZ1bmN0aW9uc1xuICBjaGFuZ2VRdWFudGl0eShlKSB7XG4gICAgdmFyIG5ld1F1YW50aXR5ID0gZS50YXJnZXQudmFsdWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBxdWFudGl0eVNlbGVjdGlvbjogbmV3UXVhbnRpdHlcbiAgICB9KTtcbiAgfVxuXG4gIHBhcnNlU3RvY2soKSB7XG4gICAgLy9jcmVhdGVzIGFuIGFycmF5IG9mIGludGVnZXJzIG9mIHdpdGhlciAxIC0gdG90YWwgbnVtYmVyIG9mIHN0b2NrLCBvciAxLTE1IGlmIHRoZSB0b3RhbCBudW1iZXIgb2Ygc3RvY2sgaXMgYWJvdmUgMTVcbiAgICAvL2lzIGRlcGVuZGVudCBvbiBzaXplIGJlaW5nIHNlbGVjdGVkXG4gICAgLy9yZXR1cm5zIGFycmF5LCBidXQgZG9lcyBub3Qgc2V0IHRoZSBzdGF0ZVxuICB9XG5cbiAgYWRkVG9DYXJ0KGV2ZW50KSB7XG4gICAgLy9ldmVudCBoYW5kbGVyIHBhc3NlZCBpbnRvIHRoZSBidXR0b25cbiAgICAvL3dpbGwgaGF2ZSBkaWZmZXJlbnQgZnVuY3Rpb25hbGl0eSBiYXNlZCBvbiB0aGUgY3VycmVudCBzdGF0ZVxuICB9XG5cbiAgLy8gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gIC8vICAgLy9nZXRzIGRhdGEgb24gY3VycmVudCBzdHlsZS4gVXBvbiBzdWNjZXNzIHJlbmRlcnMgdGhlIGZvbGxvd2luZzpcbiAgLy8gICAvL1NpemUgU2VsZWN0b3IgLVxuICAvLyAgICAgLy9pbnZva2UgcGFyc2VBdmFpbGFibGVTaXplc1xuICAvLyAgICAgLy9pZiByZXR1cm4ubGVuZ3RoID09PSAwIHRoZW4gc2V0IHN0YXRlIHRvIHNlbGVjdGlvbiA9IFwiT1VUIE9GIFNUT0NLXCIsIG1ha2UgZHJvcGRvd24gaW5hY3RpdmVcbiAgLy8gICAgIC8vZWxzZSBzZXQgc3RhdGUgdG8gc2VsZWN0aW9uID0gXCJTZWxlY3QgU2l6ZVwiLCBzaXplcyA9IHJldHVybiBvZiBwYXJzZUF2YWlsYWJsZVNpemVzIGNhbGxcbiAgLy8gICAvL1dvbid0IGhhdmUgdG8gZG8gYW55dGhpbmcgd2l0aCBRdWFudGl0eVNlbGVjdG9yLCBzaW5jZSBpdCdzIGRlZmF1bHRzIGFyZSB0byBiZSBpbmFjdGl2ZSB1bnRpbCBhIHNpemUgaXMgc2VsZWN0ZWRcbiAgLy8gfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvL2ludm9rZXMgOlxuICAgIC8vU2l6ZVNlbGVjdG9yXG4gICAgLy9RdWFudGl0eVNlbGVjdG9yIChjb25kaXRpb25hbCByZW5kZXJpbmcgYmFzZWQgb24gc3RhdGUucXVhbnRpdHlFbmFibGVkKVxuICAgIC8vcmVuZGVycyBhbiBhZGQgdG8gY2FydCBidXR0b24gdGhhdCBpcyBkZXBlbmRlbnQgb24gY3VycmVudCBzZWxlY3Rpb25cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFNpemVTZWxlY3RvciBzaXplcz17dGhpcy5zdGF0ZS5zaXplc30gY2hhbmdlPXt0aGlzLmNoYW5nZVNpemUuYmluZCh0aGlzKX0vPlxuICAgICAgICA8UXVhbnRpdHlTZWxlY3RvciBxdWFudGl0aWVzPXt0aGlzLnN0YXRlLnF1YW50aXRpZXN9IGNoYW5nZT17dGhpcy5jaGFuZ2VRdWFudGl0eS5iaW5kKHRoaXMpfS8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFkZFRvQ2FydDsiXX0=