import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import calculateStarReview from './calculateStarReview.js';
import Overview from './Overview/Overview.jsx';
import Rating from './Ratings&Reviews/rating.jsx';
import token from '../../public/token.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedProductId: null,
      reviewData: {},
      starRating: 0
    };
  }

  getProductList() {
    //request to get all products
    //returns a promise
    return axios.get('https://app-hrsei-api.herokuapp.com/api/fec2/hratx/products', {
      headers: {
        'Authorization': token
      }
    });
  }

  getReviewMetaData(productId) {
    //request to get review metadata on a specified product
    //returns a promise
    return axios.get(`https://app-hrsei-api.herokuapp.com/api/fec2/hratx/reviews/meta`, {
      headers: {
        'Authorization': token
      },
      params: {
        product_id: productId
      }
    });
  } //will probably need to update to be an event handler function for when a new product is selected


  changeProduct(productId) {
    var newState = {};
    newState.selectedProductId = productId;
    this.getReviewMetaData(newState.selectedProductId).then(reviewData => {
      newState.reviewData = reviewData.data;
      newState.starRating = calculateStarReview(newState.reviewData.ratings);
      console.log('all App data retrieved');
      this.setState(newState);
    }).catch(err => {
      console.log('Error retriving data: ', err);
    });
  }

  componentDidMount() {
    //bascially the same as changing the selected product, but has to retrieve product list at the outset
    this.getProductList().then(products => {
      this.changeProduct(products.data[0].id);
    }).catch(err => {
      console.log('Error retriving product List: ', err);
    });
  }

  render() {
    console.log('state: ', this.state);
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Overview, {
      style: this.state.selectedStyle,
      productStyles: this.state.productStyles
    }), /*#__PURE__*/React.createElement(Rating, null));
  }

}

;
export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9zcmMvQXBwLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIlJlYWN0RE9NIiwiYXhpb3MiLCJjYWxjdWxhdGVTdGFyUmV2aWV3IiwiT3ZlcnZpZXciLCJSYXRpbmciLCJ0b2tlbiIsIkFwcCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlbGVjdGVkUHJvZHVjdElkIiwicmV2aWV3RGF0YSIsInN0YXJSYXRpbmciLCJnZXRQcm9kdWN0TGlzdCIsImdldCIsImhlYWRlcnMiLCJnZXRSZXZpZXdNZXRhRGF0YSIsInByb2R1Y3RJZCIsInBhcmFtcyIsInByb2R1Y3RfaWQiLCJjaGFuZ2VQcm9kdWN0IiwibmV3U3RhdGUiLCJ0aGVuIiwiZGF0YSIsInJhdGluZ3MiLCJjb25zb2xlIiwibG9nIiwic2V0U3RhdGUiLCJjYXRjaCIsImVyciIsImNvbXBvbmVudERpZE1vdW50IiwicHJvZHVjdHMiLCJpZCIsInJlbmRlciIsInNlbGVjdGVkU3R5bGUiLCJwcm9kdWN0U3R5bGVzIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixXQUFyQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQywwQkFBaEM7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLHlCQUFyQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsOEJBQW5CO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQix1QkFBbEI7O0FBRUEsTUFBTUMsR0FBTixTQUFrQlAsS0FBSyxDQUFDUSxTQUF4QixDQUFrQztBQUNoQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxpQkFBaUIsRUFBRSxJQURSO0FBRVhDLE1BQUFBLFVBQVUsRUFBRSxFQUZEO0FBR1hDLE1BQUFBLFVBQVUsRUFBRTtBQUhELEtBQWI7QUFLRDs7QUFFREMsRUFBQUEsY0FBYyxHQUFHO0FBQ2Y7QUFDQTtBQUNBLFdBQU9iLEtBQUssQ0FBQ2MsR0FBTixDQUFVLDZEQUFWLEVBQXlFO0FBQzlFQyxNQUFBQSxPQUFPLEVBQUU7QUFDUCx5QkFBaUJYO0FBRFY7QUFEcUUsS0FBekUsQ0FBUDtBQUtEOztBQUVEWSxFQUFBQSxpQkFBaUIsQ0FBQ0MsU0FBRCxFQUFZO0FBQzNCO0FBQ0E7QUFDQSxXQUFPakIsS0FBSyxDQUFDYyxHQUFOLENBQVcsaUVBQVgsRUFBNkU7QUFDbEZDLE1BQUFBLE9BQU8sRUFBRTtBQUNQLHlCQUFpQlg7QUFEVixPQUR5RTtBQUlsRmMsTUFBQUEsTUFBTSxFQUFFO0FBQ05DLFFBQUFBLFVBQVUsRUFBRUY7QUFETjtBQUowRSxLQUE3RSxDQUFQO0FBUUQsR0EvQitCLENBaUNoQzs7O0FBQ0FHLEVBQUFBLGFBQWEsQ0FBQ0gsU0FBRCxFQUFZO0FBQ3ZCLFFBQUlJLFFBQVEsR0FBRyxFQUFmO0FBQ0FBLElBQUFBLFFBQVEsQ0FBQ1gsaUJBQVQsR0FBNkJPLFNBQTdCO0FBQ0EsU0FBS0QsaUJBQUwsQ0FBdUJLLFFBQVEsQ0FBQ1gsaUJBQWhDLEVBQ0NZLElBREQsQ0FDT1gsVUFBRCxJQUFnQjtBQUNwQlUsTUFBQUEsUUFBUSxDQUFDVixVQUFULEdBQXNCQSxVQUFVLENBQUNZLElBQWpDO0FBQ0FGLE1BQUFBLFFBQVEsQ0FBQ1QsVUFBVCxHQUFzQlgsbUJBQW1CLENBQUNvQixRQUFRLENBQUNWLFVBQVQsQ0FBb0JhLE9BQXJCLENBQXpDO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHdCQUFaO0FBQ0EsV0FBS0MsUUFBTCxDQUFjTixRQUFkO0FBQ0QsS0FORCxFQU9DTyxLQVBELENBT1FDLEdBQUQsSUFBUztBQUNkSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWixFQUFzQ0csR0FBdEM7QUFDRCxLQVREO0FBVUQ7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2xCO0FBQ0EsU0FBS2pCLGNBQUwsR0FDQ1MsSUFERCxDQUNPUyxRQUFELElBQWM7QUFDbEIsV0FBS1gsYUFBTCxDQUFtQlcsUUFBUSxDQUFDUixJQUFULENBQWMsQ0FBZCxFQUFpQlMsRUFBcEM7QUFDRCxLQUhELEVBSUNKLEtBSkQsQ0FJUUMsR0FBRCxJQUFTO0FBQ2RKLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGdDQUFaLEVBQThDRyxHQUE5QztBQUNELEtBTkQ7QUFPRDs7QUFFREksRUFBQUEsTUFBTSxHQUFHO0FBQ1BSLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVosRUFBdUIsS0FBS2pCLEtBQTVCO0FBQ0Esd0JBQ0UsOENBQ0Usb0JBQUMsUUFBRDtBQUFVLE1BQUEsS0FBSyxFQUFFLEtBQUtBLEtBQUwsQ0FBV3lCLGFBQTVCO0FBQTJDLE1BQUEsYUFBYSxFQUFFLEtBQUt6QixLQUFMLENBQVcwQjtBQUFyRSxNQURGLGVBRUUsb0JBQUMsTUFBRCxPQUZGLENBREY7QUFNRDs7QUFwRStCOztBQXFFakM7QUFFRCxlQUFlOUIsR0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgY2FsY3VsYXRlU3RhclJldmlldyBmcm9tICcuL2NhbGN1bGF0ZVN0YXJSZXZpZXcuanMnO1xuaW1wb3J0IE92ZXJ2aWV3IGZyb20gJy4vT3ZlcnZpZXcvT3ZlcnZpZXcuanN4JztcbmltcG9ydCBSYXRpbmcgZnJvbSAnLi9SYXRpbmdzJlJldmlld3MvcmF0aW5nLmpzeCc7XG5pbXBvcnQgdG9rZW4gZnJvbSAnLi4vLi4vcHVibGljL3Rva2VuLmpzJztcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNlbGVjdGVkUHJvZHVjdElkOiBudWxsLFxuICAgICAgcmV2aWV3RGF0YToge30sXG4gICAgICBzdGFyUmF0aW5nOiAwXG4gICAgfVxuICB9XG5cbiAgZ2V0UHJvZHVjdExpc3QoKSB7XG4gICAgLy9yZXF1ZXN0IHRvIGdldCBhbGwgcHJvZHVjdHNcbiAgICAvL3JldHVybnMgYSBwcm9taXNlXG4gICAgcmV0dXJuIGF4aW9zLmdldCgnaHR0cHM6Ly9hcHAtaHJzZWktYXBpLmhlcm9rdWFwcC5jb20vYXBpL2ZlYzIvaHJhdHgvcHJvZHVjdHMnLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogdG9rZW5cbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBnZXRSZXZpZXdNZXRhRGF0YShwcm9kdWN0SWQpIHtcbiAgICAvL3JlcXVlc3QgdG8gZ2V0IHJldmlldyBtZXRhZGF0YSBvbiBhIHNwZWNpZmllZCBwcm9kdWN0XG4gICAgLy9yZXR1cm5zIGEgcHJvbWlzZVxuICAgIHJldHVybiBheGlvcy5nZXQoYGh0dHBzOi8vYXBwLWhyc2VpLWFwaS5oZXJva3VhcHAuY29tL2FwaS9mZWMyL2hyYXR4L3Jldmlld3MvbWV0YWAsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0b2tlblxuICAgICAgfSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBwcm9kdWN0X2lkOiBwcm9kdWN0SWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vd2lsbCBwcm9iYWJseSBuZWVkIHRvIHVwZGF0ZSB0byBiZSBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGZvciB3aGVuIGEgbmV3IHByb2R1Y3QgaXMgc2VsZWN0ZWRcbiAgY2hhbmdlUHJvZHVjdChwcm9kdWN0SWQpIHtcbiAgICB2YXIgbmV3U3RhdGUgPSB7fTtcbiAgICBuZXdTdGF0ZS5zZWxlY3RlZFByb2R1Y3RJZCA9IHByb2R1Y3RJZDtcbiAgICB0aGlzLmdldFJldmlld01ldGFEYXRhKG5ld1N0YXRlLnNlbGVjdGVkUHJvZHVjdElkKVxuICAgIC50aGVuKChyZXZpZXdEYXRhKSA9PiB7XG4gICAgICBuZXdTdGF0ZS5yZXZpZXdEYXRhID0gcmV2aWV3RGF0YS5kYXRhO1xuICAgICAgbmV3U3RhdGUuc3RhclJhdGluZyA9IGNhbGN1bGF0ZVN0YXJSZXZpZXcobmV3U3RhdGUucmV2aWV3RGF0YS5yYXRpbmdzKTtcbiAgICAgIGNvbnNvbGUubG9nKCdhbGwgQXBwIGRhdGEgcmV0cmlldmVkJyk7XG4gICAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnRXJyb3IgcmV0cml2aW5nIGRhdGE6ICcsIGVycik7XG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvL2Jhc2NpYWxseSB0aGUgc2FtZSBhcyBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcHJvZHVjdCwgYnV0IGhhcyB0byByZXRyaWV2ZSBwcm9kdWN0IGxpc3QgYXQgdGhlIG91dHNldFxuICAgIHRoaXMuZ2V0UHJvZHVjdExpc3QoKVxuICAgIC50aGVuKChwcm9kdWN0cykgPT4ge1xuICAgICAgdGhpcy5jaGFuZ2VQcm9kdWN0KHByb2R1Y3RzLmRhdGFbMF0uaWQpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciByZXRyaXZpbmcgcHJvZHVjdCBMaXN0OiAnLCBlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnNvbGUubG9nKCdzdGF0ZTogJywgdGhpcy5zdGF0ZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxPdmVydmlldyBzdHlsZT17dGhpcy5zdGF0ZS5zZWxlY3RlZFN0eWxlfSBwcm9kdWN0U3R5bGVzPXt0aGlzLnN0YXRlLnByb2R1Y3RTdHlsZXN9Lz5cbiAgICAgICAgPFJhdGluZyAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwOyJdfQ==