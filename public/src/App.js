import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import calculateStarReview from './calculateStarReview.js';
import Overview from './Overview/Overview.jsx';
import Rating from './Ratings&Reviews/rating.jsx';
import token from '../../public/token.js';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedProductId: null,
      reviewData: {},
      starRating: 0
    };
  }

  getProductList() {
    //request to get all products
    //returns a promise
    return axios.get('https://app-hrsei-api.herokuapp.com/api/fec2/hratx/products', {
      headers: {
        'Authorization': token
      }
    });
  }

  getReviewMetaData(productId) {
    //request to get review metadata on a specified product
    //returns a promise
    return axios.get(`https://app-hrsei-api.herokuapp.com/api/fec2/hratx/reviews/meta`, {
      headers: {
        'Authorization': token
      },
      params: {
        product_id: productId
      }
    });
  } //will probably need to update to be an event handler function for when a new product is selected


  changeProduct(productId) {
    var newState = {};
    newState.selectedProductId = productId;
    this.getReviewMetaData(newState.selectedProductId).then(reviewData => {
      newState.reviewData = reviewData.data;
      newState.starRating = calculateStarReview(newState.reviewData.ratings);
      console.log('all App data retrieved');
      this.setState(newState);
    }).catch(err => {
      console.log('Error retriving data: ', err);
    });
  }

  componentDidMount() {
    //bascially the same as changing the selected product, but has to retrieve product list at the outset
    this.getProductList().then(products => {
      this.changeProduct(products.data[0].id);
    }).catch(err => {
      console.log('Error retriving product List: ', err);
    });
  }

  render() {
    console.log('state: ', this.state);
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Overview, {
      productId: this.state.selectedProductId,
      starRating: this.state.starRating
    }), /*#__PURE__*/React.createElement(Rating, null));
  }

}

;
export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9zcmMvQXBwLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIlJlYWN0RE9NIiwiYXhpb3MiLCJjYWxjdWxhdGVTdGFyUmV2aWV3IiwiT3ZlcnZpZXciLCJSYXRpbmciLCJ0b2tlbiIsIkFwcCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNlbGVjdGVkUHJvZHVjdElkIiwicmV2aWV3RGF0YSIsInN0YXJSYXRpbmciLCJnZXRQcm9kdWN0TGlzdCIsImdldCIsImhlYWRlcnMiLCJnZXRSZXZpZXdNZXRhRGF0YSIsInByb2R1Y3RJZCIsInBhcmFtcyIsInByb2R1Y3RfaWQiLCJjaGFuZ2VQcm9kdWN0IiwibmV3U3RhdGUiLCJ0aGVuIiwiZGF0YSIsInJhdGluZ3MiLCJjb25zb2xlIiwibG9nIiwic2V0U3RhdGUiLCJjYXRjaCIsImVyciIsImNvbXBvbmVudERpZE1vdW50IiwicHJvZHVjdHMiLCJpZCIsInJlbmRlciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsV0FBckI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsMEJBQWhDO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQix5QkFBckI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLDhCQUFuQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsdUJBQWxCOztBQUVBLE1BQU1DLEdBQU4sU0FBa0JQLEtBQUssQ0FBQ1EsU0FBeEIsQ0FBa0M7QUFDaENDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsaUJBQWlCLEVBQUUsSUFEUjtBQUVYQyxNQUFBQSxVQUFVLEVBQUUsRUFGRDtBQUdYQyxNQUFBQSxVQUFVLEVBQUU7QUFIRCxLQUFiO0FBS0Q7O0FBRURDLEVBQUFBLGNBQWMsR0FBRztBQUNmO0FBQ0E7QUFDQSxXQUFPYixLQUFLLENBQUNjLEdBQU4sQ0FBVSw2REFBVixFQUF5RTtBQUM5RUMsTUFBQUEsT0FBTyxFQUFFO0FBQ1AseUJBQWlCWDtBQURWO0FBRHFFLEtBQXpFLENBQVA7QUFLRDs7QUFFRFksRUFBQUEsaUJBQWlCLENBQUNDLFNBQUQsRUFBWTtBQUMzQjtBQUNBO0FBQ0EsV0FBT2pCLEtBQUssQ0FBQ2MsR0FBTixDQUFXLGlFQUFYLEVBQTZFO0FBQ2xGQyxNQUFBQSxPQUFPLEVBQUU7QUFDUCx5QkFBaUJYO0FBRFYsT0FEeUU7QUFJbEZjLE1BQUFBLE1BQU0sRUFBRTtBQUNOQyxRQUFBQSxVQUFVLEVBQUVGO0FBRE47QUFKMEUsS0FBN0UsQ0FBUDtBQVFELEdBL0IrQixDQWlDaEM7OztBQUNBRyxFQUFBQSxhQUFhLENBQUNILFNBQUQsRUFBWTtBQUN2QixRQUFJSSxRQUFRLEdBQUcsRUFBZjtBQUNBQSxJQUFBQSxRQUFRLENBQUNYLGlCQUFULEdBQTZCTyxTQUE3QjtBQUNBLFNBQUtELGlCQUFMLENBQXVCSyxRQUFRLENBQUNYLGlCQUFoQyxFQUNDWSxJQURELENBQ09YLFVBQUQsSUFBZ0I7QUFDcEJVLE1BQUFBLFFBQVEsQ0FBQ1YsVUFBVCxHQUFzQkEsVUFBVSxDQUFDWSxJQUFqQztBQUNBRixNQUFBQSxRQUFRLENBQUNULFVBQVQsR0FBc0JYLG1CQUFtQixDQUFDb0IsUUFBUSxDQUFDVixVQUFULENBQW9CYSxPQUFyQixDQUF6QztBQUNBQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWjtBQUNBLFdBQUtDLFFBQUwsQ0FBY04sUUFBZDtBQUNELEtBTkQsRUFPQ08sS0FQRCxDQU9RQyxHQUFELElBQVM7QUFDZEosTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVosRUFBc0NHLEdBQXRDO0FBQ0QsS0FURDtBQVVEOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQjtBQUNBLFNBQUtqQixjQUFMLEdBQ0NTLElBREQsQ0FDT1MsUUFBRCxJQUFjO0FBQ2xCLFdBQUtYLGFBQUwsQ0FBbUJXLFFBQVEsQ0FBQ1IsSUFBVCxDQUFjLENBQWQsRUFBaUJTLEVBQXBDO0FBQ0QsS0FIRCxFQUlDSixLQUpELENBSVFDLEdBQUQsSUFBUztBQUNkSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQ0FBWixFQUE4Q0csR0FBOUM7QUFDRCxLQU5EO0FBT0Q7O0FBRURJLEVBQUFBLE1BQU0sR0FBRztBQUNQUixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCLEtBQUtqQixLQUE1QjtBQUNBLHdCQUNFLDhDQUNFLG9CQUFDLFFBQUQ7QUFBVSxNQUFBLFNBQVMsRUFBRSxLQUFLQSxLQUFMLENBQVdDLGlCQUFoQztBQUFtRCxNQUFBLFVBQVUsRUFBRSxLQUFLRCxLQUFMLENBQVdHO0FBQTFFLE1BREYsZUFFRSxvQkFBQyxNQUFELE9BRkYsQ0FERjtBQU1EOztBQXBFK0I7O0FBcUVqQztBQUVELGVBQWVQLEdBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGNhbGN1bGF0ZVN0YXJSZXZpZXcgZnJvbSAnLi9jYWxjdWxhdGVTdGFyUmV2aWV3LmpzJztcbmltcG9ydCBPdmVydmlldyBmcm9tICcuL092ZXJ2aWV3L092ZXJ2aWV3LmpzeCc7XG5pbXBvcnQgUmF0aW5nIGZyb20gJy4vUmF0aW5ncyZSZXZpZXdzL3JhdGluZy5qc3gnO1xuaW1wb3J0IHRva2VuIGZyb20gJy4uLy4uL3B1YmxpYy90b2tlbi5qcyc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWxlY3RlZFByb2R1Y3RJZDogbnVsbCxcbiAgICAgIHJldmlld0RhdGE6IHt9LFxuICAgICAgc3RhclJhdGluZzogMFxuICAgIH1cbiAgfVxuXG4gIGdldFByb2R1Y3RMaXN0KCkge1xuICAgIC8vcmVxdWVzdCB0byBnZXQgYWxsIHByb2R1Y3RzXG4gICAgLy9yZXR1cm5zIGEgcHJvbWlzZVxuICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBwLWhyc2VpLWFwaS5oZXJva3VhcHAuY29tL2FwaS9mZWMyL2hyYXR4L3Byb2R1Y3RzJywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0UmV2aWV3TWV0YURhdGEocHJvZHVjdElkKSB7XG4gICAgLy9yZXF1ZXN0IHRvIGdldCByZXZpZXcgbWV0YWRhdGEgb24gYSBzcGVjaWZpZWQgcHJvZHVjdFxuICAgIC8vcmV0dXJucyBhIHByb21pc2VcbiAgICByZXR1cm4gYXhpb3MuZ2V0KGBodHRwczovL2FwcC1ocnNlaS1hcGkuaGVyb2t1YXBwLmNvbS9hcGkvZmVjMi9ocmF0eC9yZXZpZXdzL21ldGFgLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogdG9rZW5cbiAgICAgIH0sXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdElkXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvL3dpbGwgcHJvYmFibHkgbmVlZCB0byB1cGRhdGUgdG8gYmUgYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvbiBmb3Igd2hlbiBhIG5ldyBwcm9kdWN0IGlzIHNlbGVjdGVkXG4gIGNoYW5nZVByb2R1Y3QocHJvZHVjdElkKSB7XG4gICAgdmFyIG5ld1N0YXRlID0ge307XG4gICAgbmV3U3RhdGUuc2VsZWN0ZWRQcm9kdWN0SWQgPSBwcm9kdWN0SWQ7XG4gICAgdGhpcy5nZXRSZXZpZXdNZXRhRGF0YShuZXdTdGF0ZS5zZWxlY3RlZFByb2R1Y3RJZClcbiAgICAudGhlbigocmV2aWV3RGF0YSkgPT4ge1xuICAgICAgbmV3U3RhdGUucmV2aWV3RGF0YSA9IHJldmlld0RhdGEuZGF0YTtcbiAgICAgIG5ld1N0YXRlLnN0YXJSYXRpbmcgPSBjYWxjdWxhdGVTdGFyUmV2aWV3KG5ld1N0YXRlLnJldmlld0RhdGEucmF0aW5ncyk7XG4gICAgICBjb25zb2xlLmxvZygnYWxsIEFwcCBkYXRhIHJldHJpZXZlZCcpO1xuICAgICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHJldHJpdmluZyBkYXRhOiAnLCBlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy9iYXNjaWFsbHkgdGhlIHNhbWUgYXMgY2hhbmdpbmcgdGhlIHNlbGVjdGVkIHByb2R1Y3QsIGJ1dCBoYXMgdG8gcmV0cmlldmUgcHJvZHVjdCBsaXN0IGF0IHRoZSBvdXRzZXRcbiAgICB0aGlzLmdldFByb2R1Y3RMaXN0KClcbiAgICAudGhlbigocHJvZHVjdHMpID0+IHtcbiAgICAgIHRoaXMuY2hhbmdlUHJvZHVjdChwcm9kdWN0cy5kYXRhWzBdLmlkKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnRXJyb3IgcmV0cml2aW5nIHByb2R1Y3QgTGlzdDogJywgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zb2xlLmxvZygnc3RhdGU6ICcsIHRoaXMuc3RhdGUpO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8T3ZlcnZpZXcgcHJvZHVjdElkPXt0aGlzLnN0YXRlLnNlbGVjdGVkUHJvZHVjdElkfSBzdGFyUmF0aW5nPXt0aGlzLnN0YXRlLnN0YXJSYXRpbmd9Lz5cbiAgICAgICAgPFJhdGluZyAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwOyJdfQ==